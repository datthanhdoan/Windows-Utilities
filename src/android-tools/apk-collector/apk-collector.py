!pip install -q requests google-play-scraper beautifulsoup4

import requests
from bs4 import BeautifulSoup
from google_play_scraper import app
import os
import random
import time
import re

PROXIES = [
    "http://proxy1.example.com:8080",
    "http://proxy2.example.com:8080"
]

def get_apkmirror_download_link(package_name, version):
    """Phi√™n b·∫£n m·ªõi c·∫£i ti·∫øn cho APKMirror"""
    base_url = f"https://www.apkmirror.com/apk/{package_name.replace('.', '-')}"
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
    }
    
    # Th·ª≠ 3 ph∆∞∆°ng ph√°p kh√°c nhau
    search_patterns = [
        f"{base_url}-{version.replace('.', '-')}-release/",
        f"{base_url}-{version}-android-apk-download/",
        f"{base_url}/versions/"
    ]
    
    for url in search_patterns:
        try:
            response = requests.get(url, headers=headers)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Ph∆∞∆°ng ph√°p 1: T√¨m n√∫t download ch√≠nh
            direct_download = soup.find('a', {'data-google-vignette': 'false'}, href=re.compile('/apk/.*download/'))
            if direct_download:
                return f"https://www.apkmirror.com{direct_download['href']}"
            
            # Ph∆∞∆°ng ph√°p 2: T√¨m trong b·∫£ng phi√™n b·∫£n
            version_row = soup.find('div', class_='appRow', string=re.compile(f'^{re.escape(version)}$'))
            if version_row:
                return f"https://www.apkmirror.com{version_row.find('a', class_='accent_color')['href']}"
            
            # Ph∆∞∆°ng ph√°p 3: T√¨m qua popup download
            download_form = soup.find('form', {'id': 'file_form'})
            if download_form:
                return f"https://www.apkmirror.com{download_form['action']}"
                
        except Exception as e:
            print(f"Th·ª≠ ph∆∞∆°ng ph√°p {url} kh√¥ng th√†nh c√¥ng: {str(e)}")
            time.sleep(2)
    
    raise Exception("ƒê√£ th·ª≠ t·∫•t c·∫£ ph∆∞∆°ng ph√°p nh∆∞ng kh√¥ng t√¨m th·∫•y link download")

def download_apk_with_progress(url, filename):
    """C·∫≠p nh·∫≠t h√†m download v·ªõi headers m·ªõi"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
        'Accept': '*/*',
        'Accept-Encoding': 'gzip, deflate, br',
        'Referer': 'https://apkpure.com/',
        'Origin': 'https://apkpure.com'
    }
    
    with requests.get(url, headers=headers, stream=True) as r:
        r.raise_for_status()
        total_size = int(r.headers.get('content-length', 0))
        downloaded = 0
        
        with open(filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=1024*1024):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    print(f"\rƒêang t·∫£i: {downloaded/1024/1024:.2f}MB / {total_size/1024/1024:.2f}MB", end='')
    
    print(f"\n‚úÖ ƒê√£ l∆∞u: {filename}")

def google_play_auth():
    """X√°c th·ª±c m·ªõi v·ªõi Google Play API"""
    try:
        auth_url = "https://android.clients.google.com/auth"
        payload = {
            "Email": "77866214253@google.com",  # T√†i kho·∫£n dummy
            "service": "oauth2:https://www.googleapis.com/auth/androidmarket",
            "token_request_options": "CAA4AQ==",
            "client_sig": "38918a453d07199354f8b19af05ec6562ced5788",
            "androidId": "3422750445442333222",
            "app": "com.android.vending",
            "device_country": "us",
            "operatorCountry": "us",
            "lang": "en_US"
        }
        headers = {
            "User-Agent": "GoogleAuth/1.4 (mako JDQ39E)",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        response = requests.post(auth_url, data=payload, headers=headers)
        if "Token" not in response.text:
            raise Exception(f"L·ªói x√°c th·ª±c: {response.text}")
        return response.text.split("Token=")[1].split("\n")[0]
    except Exception as e:
        raise Exception(f"Kh√¥ng th·ªÉ x√°c th·ª±c: {str(e)}")

def get_google_play_download(package_name, version):
    """Th·ª≠ t·∫£i tr·ª±c ti·∫øp t·ª´ Google Play"""
    try:
        token = google_play_auth()
        download_url = f"https://android.clients.google.com/fdfe/download?doc={package_name}&vc={version}"
        headers = {
            "Authorization": f"GoogleLogin auth={token}",
            "User-Agent": "Android-Finsky/22.15.14 (api=3,versionCode=82151400,sdk=22,device=bullhead,hardware=bullhead,product=bullhead)",
        }
        
        # Ki·ªÉm tra link download
        response = requests.head(download_url, headers=headers, allow_redirects=True)
        if response.status_code != 200:
            raise Exception("Link download kh√¥ng kh·∫£ d·ª•ng")
            
        return response.url  # Tr·∫£ v·ªÅ URL redirect cu·ªëi c√πng
    except Exception as e:
        raise Exception(f"Kh√¥ng th·ªÉ t·∫£i t·ª´ Google Play: {str(e)}")

def get_apk_download_link(package_name, version):
    """K·∫øt h·ª£p 3 ngu·ªìn t·∫£i APK"""
    sources = [
        {"name": "APKMirror", "function": get_apkmirror_download_link},
        {"name": "APKPure", "function": get_apkpure_link},
        {"name": "APKCombo", "function": get_apkcombo_link}
    ]
    
    for source in sources:
        try:
            print(f"\nüîé ƒêang th·ª≠ t·∫£i t·ª´ {source['name']}...")
            url = source['function'](package_name, version)
            if url:
                print(f"‚úÖ T√¨m th·∫•y link t·∫°i {source['name']}")
                return url
        except Exception as e:
            print(f"‚ö†Ô∏è {source['name']} l·ªói: {str(e)}")
            time.sleep(2)
    
    raise Exception("ƒê√£ th·ª≠ t·∫•t c·∫£ ngu·ªìn nh∆∞ng kh√¥ng t√¨m th·∫•y APK ph√π h·ª£p")

def get_apkpure_link(package_name, version):
    """Phi√™n b·∫£n ho√†n ch·ªânh v·ªõi tr√¨nh duy·ªát ·∫£o"""
    session = requests.Session()
    base_url = f"https://apkpure.com/{package_name.replace('.', '-')}"
    
    # C·∫•u h√¨nh headers gi·∫£ l·∫≠p Chrome m·ªõi nh·∫•t
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'Referer': 'https://apkpure.com/',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'TE': 'trailers'
    }

    try:
        # B∆∞·ªõc 1: Truy c·∫≠p trang download
        download_page = session.get(f"{base_url}/download", headers=headers)
        download_page.raise_for_status()
        
        # B∆∞·ªõc 2: Ph√¢n t√≠ch c·∫•u tr√∫c trang
        soup = BeautifulSoup(download_page.text, 'html.parser')
        
        # B∆∞·ªõc 3: L·∫•y th√¥ng tin b·∫£o m·∫≠t
        token = soup.find('input', {'name': 'token'})['value']
        timestamp = soup.find('input', {'name': 't'})['value']
        
        # B∆∞·ªõc 4: T·∫°o URL download h·ª£p l·ªá
        download_url = f"https://apkpure.com/download.php?package={package_name}&t={timestamp}&token={token}"
        
        # B∆∞·ªõc 5: G·ª≠i request download
        response = session.get(download_url, headers=headers, allow_redirects=True)
        
        # B∆∞·ªõc 6: L·∫•y link th·ª±c t·ª´ iframe
        soup = BeautifulSoup(response.text, 'html.parser')
        iframe = soup.find('iframe', id='iframe_download')
        if not iframe:
            raise Exception("Kh√¥ng t√¨m th·∫•y iframe download")
            
        final_url = iframe['src'] if iframe['src'].startswith('http') else f"https:{iframe['src']}"
        final_url += "&force=1" if "?" in final_url else "?force=1"
        
        return final_url.replace('/APK/', '/XAPK/') + "&arch=arm64-v8a"
        
    except Exception as e:
        print(f"APKPure error: {str(e)}")
        # Fallback c√≥ ki·ªÉm tra phi√™n b·∫£n
        return f"https://d.apkpure.com/b/XAPK/{package_name}?version={version}&force=1"

def get_apkcombo_link(package_name, version):
    """T·∫£i t·ª´ APKCombo s·ª≠ d·ª•ng API public"""
    api_url = f"https://apkcombo.com/api/v1/app"
    params = {
        "package": package_name,
        "lang": "en",
        "device": "",
        "android": "",
        "cc": "US",
        "av": version
    }
    
    response = requests.get(api_url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data.get('url'):
            return data['url']['web']
    
    raise Exception("APKCombo: Phi√™n b·∫£n kh√¥ng t·ªìn t·∫°i")

def main(package_name):
    try:
        # L·∫•y th√¥ng tin ·ª©ng d·ª•ng
        app_info = app(package_name)
        version = app_info['version']
        
        # T·∫£i t·ª´ nhi·ªÅu ngu·ªìn
        download_url = get_apk_download_link(package_name, version)
        
        # Ti·∫øn h√†nh t·∫£i
        filename = f"{package_name}_v{version.replace('.', '_')}.apk"
        download_apk_with_progress(download_url, filename)

    except Exception as e:
        print(f"\n‚ùå L·ªói: {str(e)}")
        print("üëâ H∆∞·ªõng d·∫´n th·ªß c√¥ng:")
        print(f"1. Truy c·∫≠p APKPure: https://apkpure.com/{package_name}")
        print(f"2. Ho·∫∑c APKMirror: https://www.apkmirror.com/apk/{package_name.replace('.', '-')}")
        print(f"3. T√¨m phi√™n b·∫£n {version} v√† t·∫£i th·ªß c√¥ng")

# C·∫•u h√¨nh package name t·∫°i ƒë√¢y
PACKAGE_NAME = "com.color.busfrenzy"  # Thay ƒë·ªïi package name c·∫ßn t·∫£i

if __name__ == "__main__":
    main(PACKAGE_NAME)